---
title: "Internships"
subtitle : "Company relative to develop a software platform to manage fleets by GPS"
---

# Onboarding

::: {.border}
Objetive:

a junior or sernior software developer would be read the document, explained below and undestarnd the bussiness model, kwnow the practices on the company and develop software.

:::

## Tools: 

- IDE 
- GIT
- Management Studio
- Postman
- Azure Devops: boards, repository, Pipelines, 
- Workspace Google


## Enviroment Configuration 

- access to network
- git user
- connection string to database
- ip's servers.

TODO: explain how

## Arquitecture

- Microservices
- Multilayer
- Entity Framework
- Patterns : DI, Mediator, Repository

## Techniques

- SOLID
- LINQ
- CQRS with MediatR
- Mapping with Dapper
- Event bus with RabbitMQ

## References

[Microservices](https://learn.microsoft.com/en-us/dotnet/architecture/microservices/){.external}

## Procedures

- Git: creating branches by US
- 

TODO: explain how

# Bussines model

- Management fleets by gps.
- Entities: 
    + base
    + companymaster
    + company
    + client
    + employe
    + product
    + order
    + fleet
    + vehicle
    + insurance
    + operator

- Diagram class

<div class="mermaidContent">

```{mermaid}
classDiagram

class CompanyMaster 
class Company 
class Customer
class Employee 
class Insurance
class Fleet
class Base
class Product
class Vehicle
class Order
class Operator

CompanyMaster *-- Base: Composition
CompanyMaster *-- Product: Composition
CompanyMaster *-- Company: Composition
Company *-- Customer: Composition
Company *-- Employee: Composition
Company *-- Fleet: Composition
Customer *-- Insurance: Composition
Fleet *-- Vehicle: Composition
Order *-- Company: Composition
Order *-- Fleet: Composition
Order *-- Operator: Composition
Operator -- Employee
```
</div>

## Features

company, clients, providers, orders, employees, schedule control, job signing

Definition of the terms according the point of view.


## Deepen the subject



## Apliying Business model to develop sotware

- List microservices
- Query logic.


# To do

::: {.border}

> every day take a word and:
- define it
- relate it
- answer some quiestions : why, when, 

:::
